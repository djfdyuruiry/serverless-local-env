input {
    beats {
        # log events from filebeat 
        port => 5044
    }
}

filter {
    grok {
        # extract platform type from event using parent directory name
        # and app name using filename without extension
        match => {
             "[log][file][path]" => "^%{GREEDYDATA}/%{DATA:platform}/%{DATA:app}[.]log$"
        }
    }

    if "_grokparsefailure" in [tags] {
        # unable to extract platform and/or app, discard event
        drop {}
    }

    # handle docker app logs
    if [platform] == "docker" {
        # remove drop below, then put in logic for handling your docker apps here
        drop {}
    }

    # handle lambda app logs
    if [platform] == "lambda" {
        grok {
            # lambda invocation report log lines 
            match => {
                "message" => "^%{DATA:lambdaLogType}%{SPACE}RequestId:%{SPACE}%{UUID:lambdaRequestId}%{SPACE}Duration:%{SPACE}%{BASE10NUM:lambdaDurationInMs:float}%{SPACE}ms%{SPACE}Billed Duration:%{SPACE}%{BASE10NUM:lambdaBilledDurationInMs:float}%{SPACE}ms%{SPACE}Memory Size:%{SPACE}%{BASE10NUM:lambdaMemoryInMb:float}%{SPACE}MB%{SPACE}Max Memory Used:%{SPACE}%{BASE10NUM:lambdaMaxMemoryInMb:float}%{SPACE}MB%{SPACE}?$"
            }
            overwrite => [ "message" ]
            add_tag => [ "lambda-log" ]
        }

        if "_grokparsefailure" in [tags] {
            grok {
                # lambda invocation start log lines 
                match => {
                    "message" => "^%{DATA:lambdaLogType}%{SPACE}RequestId:%{SPACE}%{UUID:lambdaRequestId}%{SPACE}(Version:)%{SPACE}%{GREEDYDATA:lambdaFunctionVersion}$"
                }
                overwrite => [ "message" ]
                add_tag => [ "lambda-log" ]
                remove_tag => [ "_grokparsefailure" ]
            }

            if "_grokparsefailure" in [tags] {
                grok {
                    # lambda invocation end log lines 
                    match => {
                        "message" => "^%{DATA:lambdaLogType}%{SPACE}RequestId:%{SPACE}%{UUID:lambdaRequestId}$"
                    }
                    overwrite => [ "message" ]
                    add_tag => [ "lambda-log" ]
                    remove_tag => [ "_grokparsefailure" ]
                }

                if "_grokparsefailure" in [tags] {
                    grok {
                        # lambda app request log lines
                        match => {
                            "message" => "^%{TIMESTAMP_ISO8601:file_timestamp}%{SPACE}%{UUID:lambdaRequestId}%{SPACE}%{LOGLEVEL:level}%{SPACE}%{DATA:class}-%{SPACE}\[%{WORD:method}\]%{SPACE}%{URIPATH:path}%{URIPARAM:queryString}?%{SPACE}-%{SPACE}%{GREEDYDATA:message}$"
                        }
                        overwrite => [ "message" ]
                        add_tag => [ "request-log" ]
                        remove_tag => [ "_grokparsefailure" ]
                    }

                    if "_grokparsefailure" in [tags] {
                        grok {
                            # lambda app log lines
                            match => {
                                "message" => "^%{TIMESTAMP_ISO8601:file_timestamp}%{SPACE}%{UUID:lambdaRequestId}%{SPACE}%{LOGLEVEL:level}%{SPACE}%{DATA:class}%{SPACE}-%{SPACE}%{GREEDYDATA:message}$"
                            }
                            overwrite => [ "message" ]
                            add_tag => [ "app-log" ]
                            remove_tag => [ "_grokparsefailure" ]
                        }
                    }
                }
            }
        }
    }

    if "_grokparsefailure" in [tags] {
        # no log format matches, discard event
        drop {}
    }

    date {
        match => [ "file_timestamp", "ISO8601" ]
        remove_field => [ "file_timestamp" ]
    }
}

output {
    elasticsearch {
        hosts => [ "elasticsearch:9200" ]
        index => "%{app}-%{platform}-logs"
    }
}
